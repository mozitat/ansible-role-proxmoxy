---

- name: provision > find all template files
  command: "find -type f -printf '%P\n'"
  args:
    chdir: "{{ proxmoxy__templates_dir }}"
  changed_when: false
  register: __proxmoxy_prov_reg_templates

- name: provision > get list of current VMIDs
  shell: >
    pct list | cut -f1 -d' ' | grep -iv VMID || echo 'empty'
  changed_when: false
  register: __proxmoxy_prov_reg_vmids

# Compute the right ostemplate file for every container.
# ostemplate can contain a (regex) pattern to match the filename, i.e. "centos-7.*20160404.*"
# complicated statement, therefor outsourced to its own set_fact var
- name: provision > populate matching templates for all containers
  set_fact:
    __proxmoxy_ct_template_match: "{{ __proxmoxy_ct_template_match|default({}) | combine( {item.vmid: __proxmoxy_prov_reg_templates.stdout_lines|select('search', item.ostemplate|default(proxmoxy__templates_default))|sort|last|string} ) }}"
  with_items: "{{ proxmoxy__provision_containers }}"
  when: not ansible_check_mode

- name: provision > configure lxc container
  proxmox_prov:
    state: "{{ item.state|default('present') }}"
    vmid: "{{ item.vmid }}"
    password: "{{ lookup('password', secret|d('secret') + '/cred/' +
                  item.hostname|default('lxc') + ('.' + item.searchdomain if
                   item.searchdomain|d() else '') + '/root/pw length=32') if 
                   proxmoxy__provision_secret else item.password|default(omit) }}"
    hostname: "{{ item.hostname|default('lxc') }}"
    ostemplate: "{{ proxmoxy__templates_dir }}/{{ __proxmoxy_ct_template_match[item.vmid]|default(omit) }}"
    arch: "{{ item.arch|default(omit) }}"
    cmode: "{{ item.cmode|default(omit) }}"
    console: "{{ item.console|default(omit) }}"
    cores: "{{ item.cores|default(omit) }}"
    cpuunits: "{{ item.cpuunits|default(omit) }}"
    description: "{{ item.description|default(omit) }}"
    memory: "{{ item.memory|default(omit) }}"
    mp0: "{{ item.mp0|default(omit) }}"
    mp1: "{{ item.mp1|default(omit) }}"
    mp2: "{{ item.mp2|default(omit) }}"
    mp3: "{{ item.mp3|default(omit) }}"
    mp4: "{{ item.mp4|default(omit) }}"
    mp5: "{{ item.mp5|default(omit) }}"
    mp6: "{{ item.mp6|default(omit) }}"
    mp7: "{{ item.mp7|default(omit) }}"
    mp8: "{{ item.mp8|default(omit) }}"
    mp9: "{{ item.mp9|default(omit) }}"
    net0: "{{ item.net0 | combine({'bridge': proxmoxy__provision_bridge|d('vmbr0')}) if item.net0|d({}) and item.net0.bridge is undefined else item.net0|default(omit) }}"
    net1: "{{ item.net1 | combine({'bridge': proxmoxy__provision_bridge|d('vmbr0')}) if item.net1|d({}) and item.net1.bridge is undefined else item.net1|default(omit) }}"
    net2: "{{ item.net2 | combine({'bridge': proxmoxy__provision_bridge|d('vmbr0')}) if item.net2|d({}) and item.net2.bridge is undefined else item.net2|default(omit) }}"
    net3: "{{ item.net3 | combine({'bridge': proxmoxy__provision_bridge|d('vmbr0')}) if item.net3|d({}) and item.net3.bridge is undefined else item.net3|default(omit) }}"
    net4: "{{ item.net4 | combine({'bridge': proxmoxy__provision_bridge|d('vmbr0')}) if item.net4|d({}) and item.net4.bridge is undefined else item.net4|default(omit) }}"
    net5: "{{ item.net5 | combine({'bridge': proxmoxy__provision_bridge|d('vmbr0')}) if item.net5|d({}) and item.net5.bridge is undefined else item.net5|default(omit) }}"
    net6: "{{ item.net6 | combine({'bridge': proxmoxy__provision_bridge|d('vmbr0')}) if item.net6|d({}) and item.net6.bridge is undefined else item.net6|default(omit) }}"
    net7: "{{ item.net7 | combine({'bridge': proxmoxy__provision_bridge|d('vmbr0')}) if item.net7|d({}) and item.net7.bridge is undefined else item.net7|default(omit) }}"
    net8: "{{ item.net8 | combine({'bridge': proxmoxy__provision_bridge|d('vmbr0')}) if item.net8|d({}) and item.net8.bridge is undefined else item.net8|default(omit) }}"
    net9: "{{ item.net9 | combine({'bridge': proxmoxy__provision_bridge|d('vmbr0')}) if item.net9|d({}) and item.net9.bridge is undefined else item.net9|default(omit) }}"
    node: "{{ item.node|default(omit) }}"
    onboot: "{{ item.onboot|default(omit) }}"
    ostype: "{{ item.ostype|default(omit) }}"
    pool: "{{ item.pool|default(omit) }}"
    protection: "{{ item.protection|default(omit) }}"
    rootfs: "{{ item.rootfs|default(omit) }}"
    searchdomain: "{{ item.searchdomain|default(omit) }}"
    ssh_public_keys: "{{ item.ssh_public_keys|default(omit) }}"
    startup: "{{ item.startup|default(omit) }}"
    storage: "{{ item.storage|default(omit) }}"
    swap: "{{ item.swap|default(omit) }}"
    tty: "{{ item.tty|default(omit) }}"
    unprivileged: "{{ item.unprivileged|default(omit) }}"
  with_items: "{{ proxmoxy__provision_containers }}"
  register: __proxmoxy_register_containers

# - debug:
#     var: item.item.vmid
#     verbosity: 1
#   when: item.item.vmid|string not in __proxmoxy_prov_reg_vmids.stdout_lines
#   with_items: "{{ __proxmoxy_register_containers.results }}"

# If vm (vmid) was not here before (on top), it must be a new VM.
- name: Provision > start new containers
  shell: >
    pct start {{ item.item.vmid | d() }}
  when: not ansible_check_mode and item and item.item.vmid | string not in __proxmoxy_prov_reg_vmids.stdout_lines and (proxmoxy__provision_post_cmds|length or item.item.onboot|d(False)|bool)
  with_items:
    - "{{ __proxmoxy_register_containers.results|d([]) }}"

- name: Provision > execute commands on new containers
  shell: >
    echo '{{ item[1] }}' | pct enter {{ item[0].item.vmid|d() }}
  when: not ansible_check_mode and item[0] and item[0].item.vmid|string not in __proxmoxy_prov_reg_vmids.stdout_lines
  with_nested:
    - "{{ __proxmoxy_register_containers.results|d([]) }}"
    - "{{ proxmoxy__provision_post_cmds|d([]) }}"
  ignore_errors: True

- name: Provision > stop new containers, unless onboot
  shell: >
    pct stop {{ item.item.vmid|d() }}
  when: not ansible_check_mode and item and (item.item.vmid|string not in __proxmoxy_prov_reg_vmids.stdout_lines) and not item.item.onboot|d(False)|bool and proxmoxy__provision_post_cmds|length
  with_items:
    - "{{ __proxmoxy_register_containers.results|d([]) }}"

- name: Provision > ensure bootstrap hosts file exists
  local_action: lineinfile dest='{{ proxmoxy__provision_bootstrap_file }}'
                regexp="^\[\S+\]$" line='[{{ proxmoxy__provision_bootstrap_entry }}]'
                state=present
  # workaround with length, "hosts/bootstrap" throws error like unknown variable "hosts"
  when: proxmoxy__provision_bootstrap_file|d('')|string|length
  become: False

- name: Provision > write container to bootstrapping hosts file
  local_action: lineinfile dest='{{ proxmoxy__provision_bootstrap_file }}'
                regexp="^{{ item.item.hostname|d() + ('.' + item.item.searchdomain if item.item.searchdomain is defined else '') }}.*$"
                line='{{ item.item.hostname|d() + ("." + item.item.searchdomain if item.item.searchdomain is defined else "") }}
                ansible_host={{ item.item.net0.ip|d('127.0.1.1')|ipaddr("address") if item.item.net0 is defined else '127.0.1.1' }}
                ansible_user=root'
                state=present
  when: not ansible_check_mode and proxmoxy__provision_bootstrap_file|d('')|string|length and item.item.vmid|string not in __proxmoxy_prov_reg_vmids.stdout_lines
  with_items:
    - "{{ __proxmoxy_register_containers.results|d([]) }}"
  become: False
